{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/country-list/country-list.component.ts","./src/app/country-list/country-list.component.html","./src/app/country-list/country.service.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,wE;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAA0C;;;AAOnC,MAAM,YAAY;IALzB;QAME,UAAK,GAAG,YAAY,CAAC;KACtB;;wEAFY,YAAY;4FAAZ,YAAY;QCPzB,8EAAqC;;6FDOxB,YAAY;cALxB,uDAAS;eAAC;gBACT,QAAQ,EAAE,UAAU;gBACpB,WAAW,EAAE,sBAAsB;gBACnC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC;;;;;;;;;;;;;;AEND;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AACjB;AAEM;AACgC;AACF;AACpB;AACO;AACM;AACf;AACW;AACT;AACQ;;AAoBxD,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,CAAC,4EAAc,EAAE,qEAAgB,EAAE,+DAAU,CAAC,YAVhD;YACP,uEAAa;YACb,4FAAuB;YACvB,qEAAgB;YAChB,sEAAc;YACd,oEAAa;YACb,+EAAkB;YAClB,uEAAc;YACd,+EAAkB;SACnB;mIAIU,SAAS,mBAhBlB,2DAAY;QACZ,yFAAoB,aAGpB,uEAAa;QACb,4FAAuB;QACvB,qEAAgB;QAChB,sEAAc;QACd,oEAAa;QACb,+EAAkB;QAClB,uEAAc;QACd,+EAAkB;6FAKT,SAAS;cAlBrB,sDAAQ;eAAC;gBACR,YAAY,EAAE;oBACZ,2DAAY;oBACZ,yFAAoB;iBACrB;gBACD,OAAO,EAAE;oBACP,uEAAa;oBACb,4FAAuB;oBACvB,qEAAgB;oBAChB,sEAAc;oBACd,oEAAa;oBACb,+EAAkB;oBAClB,uEAAc;oBACd,+EAAkB;iBACnB;gBACD,SAAS,EAAE,CAAC,4EAAc,EAAE,qEAAgB,EAAE,+DAAU,CAAC;gBACzD,SAAS,EAAE,CAAC,2DAAY,CAAC;aAC1B;;;;;;;;;;;;;;AC/BD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0E;AACf;AAGZ;AACU;;;;;;;;;ICIrD,sFAAmD;IAAA,kEAAO;IAAA,4DAAkB;;;IAC5E,2EAAoC;IAAA,uDAAmB;IAAA,4DAAW;;;IAA9B,0DAAmB;IAAnB,oFAAmB;;;IAIvD,sFAAmD;IAAA,gEAAK;IAAA,4DAAkB;;;IAC1E,2EAAoC;IAAA,uDAAiB;IAAA,4DAAW;;;IAA5B,0DAAiB;IAAjB,kFAAiB;;;IAIrD,sFAAmD;IAAA,uEAAY;IAAA,4DAAkB;;;IACjF,2EAAoC;IAAA,uDAAgB;IAAA,4DAAW;;;IAA3B,0DAAgB;IAAhB,iFAAgB;;;IAIpD,sFAAmD;IAAA,gEAAK;IAAA,4DAAkB;;;IAC1E,2EAAoC;IAAA,uDAAiB;IAAA,4DAAW;;;IAA5B,0DAAiB;IAAjB,kFAAiB;;;IAGvD,4EAAqE;;;IACrE,qEAAoE;;;ADjB/D,MAAM,oBAAoB;IAQ/B,YAAoB,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QANlD,qBAAgB,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACzD,eAAU,GAAG,IAAI,0EAAkB,EAAW,CAAC;IAKO,CAAC;IAEvD,QAAQ;QACN,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;aAC1B,SAAS,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,EAC5D,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC;IAC/C,CAAC;IAED,oBAAoB,CAAC,SAAS;QAC5B,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,SAAS,CAAC;IACnC,CAAC;IAED,oBAAoB,CAAC,GAAG;QACtB,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IACnB,CAAC;IAED,eAAe;QACb,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;QACjC,IAAI,CAAC,UAAU,CAAC,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC;IAC7C,CAAC;IAED,QAAQ,CAAC,KAAa;QACpB,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,iBAAiB,EAAE,CAAC;IAC5D,CAAC;;wFA/BU,oBAAoB;oGAApB,oBAAoB;kEAKpB,8DAAO;kEACP,wEAAY;;;;;;QClBzB,yEACE;QAAA,iFACE;QAAA,2EACF;QAD8B,iJAAS,iCAA6B,IAAC;QAAnE,4DACF;QAAA,4DAAiB;QAEnB,4DAAM;QAEN,+EACE;QAAA,2EACE;QAAA,wIAAmD;QACnD,0HAAoC;QACtC,qEAAe;QAEf,2EACE;QAAA,wIAAmD;QACnD,0HAAoC;QACtC,qEAAe;QAEf,4EACE;QAAA,0IAAmD;QACnD,4HAAoC;QACtC,qEAAe;QAEf,4EACE;QAAA,0IAAmD;QACnD,4HAAoC;QACtC,qEAAe;QAEf,wIAAoD;QACpD,2HAA0D;QAC5D,4DAAY;QAEZ,oFAMgB;;QA/BL,0DAAyB;QAAzB,sFAAyB;QAqBlB,2DAAmC;QAAnC,iGAAmC;QAC1C,0DAAgD;QAAhD,kGAAgD;QAI5C,0DAAiC;QAAjC,8FAAiC;;6FDrBnC,oBAAoB;cALhC,uDAAS;eAAC;gBACT,QAAQ,EAAE,kBAAkB;gBAC5B,WAAW,EAAE,+BAA+B;gBAC5C,SAAS,EAAE,CAAC,8BAA8B,CAAC;aAC5C;;kBAME,uDAAS;mBAAC,8DAAO;;kBACjB,uDAAS;mBAAC,wEAAY;;;;;;;;;;;;;;AElBzB;AAAA;AAAA;AAAA;AAAyC;;;AAKlC,MAAM,cAAc;IAGzB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAClC,IAAI,CAAC,YAAY,GAAG,iCAAiC,CAAC;IACxD,CAAC;IAED,OAAO;QACL,OAAO,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;IAC1C,CAAC;;4EATU,cAAc;iGAAd,cAAc,WAAd,cAAc;6FAAd,cAAc;cAD1B,wDAAU;;;;;;;;;;;;;;ACJX;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAIU;;;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,gBAAgB,CAAC,0DAAU;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'jumia-task';\n}\n","<app-country-list></app-country-list>\r\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {CountryListComponent} from './country-list/country-list.component';\nimport {MatTableModule} from '@angular/material/table';\nimport {CountryService} from './country-list/country.service';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatPaginatorModule} from '@angular/material/paginator';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CountryListComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatTableModule,\n    MatSortModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatPaginatorModule\n  ],\n  providers: [CountryService, HttpClientModule, HttpClient],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {AfterViewInit, Component, OnInit, ViewChild} from '@angular/core';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {Country} from './country';\nimport {CountryService} from './country.service';\nimport {MatSort} from '@angular/material/sort';\nimport {MatPaginator} from '@angular/material/paginator';\n\n@Component({\n  selector: 'app-country-list',\n  templateUrl: './country-list.component.html',\n  styleUrls: ['./country-list.component.css']\n})\nexport class CountryListComponent implements OnInit, AfterViewInit {\n\n  displayedColumns = ['country', 'state', 'code', 'phone'];\n  dataSource = new MatTableDataSource<Country>();\n\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(private countryService: CountryService) { }\n\n  ngOnInit(): void {\n    this.countryService.getData()\n      .subscribe((countries) => this.getCountriesDataDone(countries),\n        (err) => this.getCountriesDataFail(err));\n  }\n\n  getCountriesDataDone(countries) {\n    this.dataSource.data = countries;\n  }\n\n  getCountriesDataFail(err) {\n    console.log(err);\n  }\n\n  ngAfterViewInit(): void {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n\n  doFilter(value: string) {\n    this.dataSource.filter = value.trim().toLocaleLowerCase();\n  }\n}\n","<div style=\"margin-left: 600px\">\r\n  <mat-form-field>\r\n    <input matInput type=\"text\" (keyup)=\"doFilter($event.target.value)\" placeholder=\"Click To Filter By Any Field\">\r\n  </mat-form-field>\r\n\r\n</div>\r\n\r\n<mat-table [dataSource]=\"dataSource\" matSort>\r\n  <ng-container matColumnDef=\"country\">\r\n    <mat-header-cell *matHeaderCellDef mat-sort-header>Country</mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\">{{element.country}}</mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"state\">\r\n    <mat-header-cell *matHeaderCellDef mat-sort-header>State</mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\">{{element.state}}</mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"code\">\r\n    <mat-header-cell *matHeaderCellDef mat-sort-header>Country Code</mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\">{{element.code}}</mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"phone\">\r\n    <mat-header-cell *matHeaderCellDef mat-sort-header>Phone</mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\">{{element.phone}}</mat-cell>\r\n  </ng-container>\r\n\r\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n</mat-table>\r\n\r\n<mat-paginator #paginator\r\n               [length]=\"dataSource.data.length\"\r\n               [pageIndex]=\"0\"\r\n               [pageSize]=\"10\"\r\n               [pageSizeOptions]=\"[10,20,30,40,50]\">\r\n\r\n</mat-paginator>\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n\r\n@Injectable()\r\nexport class CountryService {\r\n  countriesURL: string;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.countriesURL = 'http://localhost:8080/countries';\r\n  }\r\n\r\n  getData(): any {\r\n    return this.http.get(this.countriesURL);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}