{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/country-list/country-list.component.ts","webpack:///src/app/country-list/country-list.component.html","webpack:///src/app/country-list/country.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppComponent","title","selector","templateUrl","styleUrls","AppModule","declarations","imports","providers","bootstrap","CountryListComponent","countryService","displayedColumns","dataSource","getData","subscribe","countries","getCountriesDataDone","err","getCountriesDataFail","data","console","log","sort","paginator","value","filter","trim","toLocaleLowerCase","doFilter","CountryService","http","countriesURL","get","environment","production","bootstrapModule","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'jumia-task';\n}\n","<app-country-list></app-country-list>\r\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\n\nimport {AppComponent} from './app.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {CountryListComponent} from './country-list/country-list.component';\nimport {MatTableModule} from '@angular/material/table';\nimport {CountryService} from './country-list/country.service';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatPaginatorModule} from '@angular/material/paginator';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CountryListComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    HttpClientModule,\n    MatTableModule,\n    MatSortModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatPaginatorModule\n  ],\n  providers: [CountryService, HttpClientModule, HttpClient],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import {AfterViewInit, Component, OnInit, ViewChild} from '@angular/core';\nimport {MatTableDataSource} from '@angular/material/table';\nimport {Country} from './country';\nimport {CountryService} from './country.service';\nimport {MatSort} from '@angular/material/sort';\nimport {MatPaginator} from '@angular/material/paginator';\n\n@Component({\n  selector: 'app-country-list',\n  templateUrl: './country-list.component.html',\n  styleUrls: ['./country-list.component.css']\n})\nexport class CountryListComponent implements OnInit, AfterViewInit {\n\n  displayedColumns = ['country', 'state', 'code', 'phone'];\n  dataSource = new MatTableDataSource<Country>();\n\n  @ViewChild(MatSort) sort: MatSort;\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n\n  constructor(private countryService: CountryService) { }\n\n  ngOnInit(): void {\n    this.countryService.getData()\n      .subscribe((countries) => this.getCountriesDataDone(countries),\n        (err) => this.getCountriesDataFail(err));\n  }\n\n  getCountriesDataDone(countries) {\n    this.dataSource.data = countries;\n  }\n\n  getCountriesDataFail(err) {\n    console.log(err);\n  }\n\n  ngAfterViewInit(): void {\n    this.dataSource.sort = this.sort;\n    this.dataSource.paginator = this.paginator;\n  }\n\n  doFilter(value: string) {\n    this.dataSource.filter = value.trim().toLocaleLowerCase();\n  }\n}\n","<div style=\"margin-left: 600px\">\r\n  <mat-form-field>\r\n    <input matInput type=\"text\" (keyup)=\"doFilter($event.target.value)\" placeholder=\"Click To Filter By Any Field\">\r\n  </mat-form-field>\r\n\r\n</div>\r\n\r\n<mat-table [dataSource]=\"dataSource\" matSort>\r\n  <ng-container matColumnDef=\"country\">\r\n    <mat-header-cell *matHeaderCellDef mat-sort-header>Country</mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\">{{element.country}}</mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"state\">\r\n    <mat-header-cell *matHeaderCellDef mat-sort-header>State</mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\">{{element.state}}</mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"code\">\r\n    <mat-header-cell *matHeaderCellDef mat-sort-header>Country Code</mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\">{{element.code}}</mat-cell>\r\n  </ng-container>\r\n\r\n  <ng-container matColumnDef=\"phone\">\r\n    <mat-header-cell *matHeaderCellDef mat-sort-header>Phone</mat-header-cell>\r\n    <mat-cell *matCellDef=\"let element\">{{element.phone}}</mat-cell>\r\n  </ng-container>\r\n\r\n  <mat-header-row *matHeaderRowDef=\"displayedColumns\"></mat-header-row>\r\n  <mat-row *matRowDef=\"let row; columns: displayedColumns;\"></mat-row>\r\n</mat-table>\r\n\r\n<mat-paginator #paginator\r\n               [length]=\"dataSource.data.length\"\r\n               [pageIndex]=\"0\"\r\n               [pageSize]=\"10\"\r\n               [pageSizeOptions]=\"[10,20,30,40,50]\">\r\n\r\n</mat-paginator>\r\n","import {Injectable} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\n\r\n\r\n@Injectable()\r\nexport class CountryService {\r\n  countriesURL: string;\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.countriesURL = 'http://localhost:8080/countries';\r\n  }\r\n\r\n  getData(): any {\r\n    return this.http.get(this.countriesURL);\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}